// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package sqlc

import (
	"context"
	"time"
)

const addOrderItem = `-- name: AddOrderItem :exec
INSERT INTO order_items (order_id, product_id, quantity, price)
VALUES ($1, $2, $3, $4)
`

type AddOrderItemParams struct {
	OrderID   int32
	ProductID int32
	Quantity  int32
	Price     string
}

func (q *Queries) AddOrderItem(ctx context.Context, arg AddOrderItemParams) error {
	_, err := q.db.ExecContext(ctx, addOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	return err
}

const cancelOrder = `-- name: CancelOrder :one
UPDATE orders
SET status = 'Cancelled', updated_at = NOW()
WHERE id = $1 AND status = 'Pending'
RETURNING id, user_id, total, status, updated_at
`

type CancelOrderRow struct {
	ID        int32
	UserID    int32
	Total     string
	Status    string
	UpdatedAt time.Time
}

func (q *Queries) CancelOrder(ctx context.Context, id int32) (CancelOrderRow, error) {
	row := q.db.QueryRowContext(ctx, cancelOrder, id)
	var i CancelOrderRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.Status,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, total, status)
VALUES ($1, $2, 'Pending')
RETURNING id, user_id, total, status, created_at
`

type CreateOrderParams struct {
	UserID int32
	Total  string
}

type CreateOrderRow struct {
	ID        int32
	UserID    int32
	Total     string
	Status    string
	CreatedAt time.Time
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (CreateOrderRow, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.UserID, arg.Total)
	var i CreateOrderRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, user_id, total, status FROM orders WHERE user_id = $1
`

type GetOrderByIdRow struct {
	ID     int32
	UserID int32
	Total  string
	Status string
}

func (q *Queries) GetOrderById(ctx context.Context, userID int32) (GetOrderByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, userID)
	var i GetOrderByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.Status,
	)
	return i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT product_id, quantity, price FROM order_items WHERE order_id = $1
`

type GetOrderItemsRow struct {
	ProductID int32
	Quantity  int32
	Price     string
}

func (q *Queries) GetOrderItems(ctx context.Context, orderID int32) ([]GetOrderItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderItemsRow
	for rows.Next() {
		var i GetOrderItemsRow
		if err := rows.Scan(&i.ProductID, &i.Quantity, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByUserId = `-- name: GetOrdersByUserId :many
SELECT id, user_id, total, status, created_at, updated_at FROM orders WHERE user_id = $1
`

func (q *Queries) GetOrdersByUserId(ctx context.Context, userID int32) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Total,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $1, updated_at = NOW()
WHERE id = $2
`

type UpdateOrderStatusParams struct {
	Status string
	ID     int32
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	return err
}

const updateOrderTotal = `-- name: UpdateOrderTotal :one
UPDATE orders
SET total = (
    SELECT SUM(price * quantity)
    FROM order_items
    WHERE order_id = $1
), updated_at = NOW()
WHERE id = $1
RETURNING id, total, status, updated_at
`

type UpdateOrderTotalRow struct {
	ID        int32
	Total     string
	Status    string
	UpdatedAt time.Time
}

func (q *Queries) UpdateOrderTotal(ctx context.Context, orderID int32) (UpdateOrderTotalRow, error) {
	row := q.db.QueryRowContext(ctx, updateOrderTotal, orderID)
	var i UpdateOrderTotalRow
	err := row.Scan(
		&i.ID,
		&i.Total,
		&i.Status,
		&i.UpdatedAt,
	)
	return i, err
}
